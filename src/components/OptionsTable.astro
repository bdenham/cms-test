---
interface Props {
  options: string[][];
  compact?: boolean;
}

const { options, compact = false } = Astro.props;
const [headers, ...rows] = options;

const cellClassName = compact ? 'compactCell' : 'cell';

const newHeaders = headers.map((header) => {
  const isCodeHeader = header.endsWith('(code)');
  const headerText = isCodeHeader ? header.replace('(code)', '') : header;
  const minWidthMatch = headerText.match(/\d+px/);
  const minWidth = minWidthMatch ? minWidthMatch[0] : null;
  const newHeaderText = minWidth
    ? headerText.replace(minWidth, '')
    : headerText;

  return {
    text: newHeaderText,
    minWidth: minWidth,
  };
});

const newRows = rows.map((row) => {
  if (row.length === 0) {
    return [' ', ' ', ' ', ' '];
  } else {
    return row;
  }
});
---

<div class="optionsTable">
  <table class="table">
    <thead class="tableHeader">
      <tr class="headerRow">
        {
          newHeaders.map((header, index) => {
            const isCodeHeader = headers[index].endsWith('(code)');
            let headerClassName = 'headerCell';
            if (header.minWidth) {
              headerClassName += ` minWidth`;
            }

            return (
              <th
                key={headers[index]}
                class={headerClassName}
                style={{ minWidth: header.minWidth }}
              >
                {header.text}
              </th>
            );
          })
        }
      </tr>
    </thead>
    <tbody class="body">
      {
        newRows.map((row, rowIndex) => (
          <tr key={rowIndex}>
            {row.map((cell, index) => {
              const isCodeCell = headers[index].endsWith('(code)');
              let cellClassNameOverride = isCodeCell
                ? compact
                  ? 'compactCodeCell'
                  : 'codeCell'
                : cellClassName;

              return (
                <td key={index} class={cellClassNameOverride}>
                  {cell}
                </td>
              );
            })}
          </tr>
        ))
      }
    </tbody>
  </table>
</div>

<style>
  .optionsTable {
    margin-left: -1.25rem;
    margin-right: -1.25rem;
    margin-bottom: 1rem;
    margin-top: 1.5rem;
    overflow-x: auto;
    overscroll-behavior-x: contain;
    padding-left: 1.5rem;
    padding-right: 1.5rem;
    padding-bottom: 1rem;
  }

  .optionsTable::-webkit-scrollbar {
    width: 0;
  }

  .table {
    border-collapse: collapse;
    font-size: 0.9rem;
    line-height: 1.25rem;
    width: 100%;
  }

  .tableHeader {
    border-top: 0 none transparent;
    border-bottom: 1px solid rgb(220, 220, 220);
    padding: 1rem 0;
    text-align: left;
  }

  .headerRow {
    border-top: 0 none transparent;
    border-bottom: 1px solid rgb(220, 220, 220);
    padding: 1rem 0;
    text-align: left;
  }

  .headerCell {
    border: none;
    padding: 0.5rem 0;
    font-weight: 600;
  }

  .body {
    vertical-align: baseline;
  }

  .row {
    border-bottom: 1px solid rgb(135, 29, 29);
  }

  .cell {
    padding: 0.5rem 0 0.5rem 0;
    line-height: 1.5rem;
    font-family: inherit;
    border-bottom: 1px solid rgb(220, 220, 220);
  }

  .codeCell {
    border: none;
    white-space: pre;
    padding: 0.5rem 0 0.5rem 0;
    line-height: 1.5rem;
    font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;
    font-size: 0.75rem;
    border-bottom: 1px solid rgb(220, 220, 220);
  }

  .compactCell {
    padding: 0;
    border: none;
    line-height: 1.5rem;
    font-family: inherit;
    border-bottom: 1px solid rgb(220, 220, 220);
  }

  .compactCodeCell {
    border: none;
    white-space: pre;
    padding: 0;
    line-height: 1.5rem;
    font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;
    font-size: 0.75rem;
    border-bottom: 1px solid rgb(220, 220, 220);
  }
</style>
